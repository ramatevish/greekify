# -*- coding: utf8 -*-
import pickle
import corpus
import os
import sys
import traceback

def load_corpus():
    '''
    Returns the corpus from the serialized corpus generated by parse_corpus
    .
    '''
    file_ = open("./corpus.pickle","r")
    corpus = pickle.load(file_)
    
    print("Corpus loaded (Entries: "+ str(corpus.entries) + ", Unique Entries: " + str(corpus.unique_entries) + ")")
    return corpus

def get_word_array(cword):
    total = 0.
    for word in cword.unique_words:
        total += cword.unique_words[word]
    words = []
    for word in cword.unique_words:
        words.append((word, round(cword.unique_words[word]/total,2)))
    
    return words

def convert_to_final_sigma(word):
    if word[-1:] == "σ":
        word = word[:-1] + "ς"
    word
            
def convert_to_normal_sigma(word):
    if word[-1:] == "ς":
        word = word[:-1] + "σ"
    return word

def lookup_word(corpus, word):
    choices = None
    try:
        cword = corpus[word]
        choices = get_word_array(cword)
        choices = sorted(choices, key=lambda tup: tup[1], reverse=True)
        
    except KeyError:
        print("Couldn't find " + word + " in the corpus. \nPerhaps there is a hanging puctuation mark or incorrect character?")
    
    return choices

def print_choices(choices):
    i = 1
    for op in choices:
        print(str(i) + ") " + op[0] + ": " + str(op[1]))
        i += 1

def get_choice(choices):
    err_str = ""
    ret = ""
    allowed_values = "qm"
    
    try:
        choice = raw_input("? ")
        
        #check non-numbers
        if len(choice) == 1:
            pass
        
        choice = int(choice)
    
    except NameError:
        if len(choice) == 1 and choice in allowed_values:
            ret = choice
        else:
            err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
        
    except ValueError:
        err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
        
    if isinstance(choice, int) and (choice < 1 or choice > len(choices)):
        err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
        
    if err_str != "":
        ret = err_str 
    else:
        ret = choice
    
            
    return ret

def parse_file(path):
    print("Beginning flat Greek parser. For each word a list of potential accented versions of the flat word will be shown. When prompted, enter one of the given numbers to replace the original with the selected word.\n")
    corpus_ = load_corpus()
    
    file_ = open(path, "r").read()
    replaced_string = ""
    
    for word in file_.split(" "):
        print("--------------------------------------------------------------------------------")
        choice = ""
        if word != "":
            #get options and sort
            choices = lookup_word(corpus_, word)
            
            #if we can't find word in the corpus
            if not choices:
                print("Skipping " + word)
                pass
            
            else:
                print("Replace " + word + " with:\n")
                
                #loop until valid selection given
                while not isinstance(choice,int) or len(choices) < choice or choice < 1:
                    #print options
                    print_choices(choices)
                    
                    #get raw input and try to make int or command
                    choice = get_choice(choices)
                    
                    if isinstance(choice, str) and len(choice) != 1:
                        print(choice)
                    



        if choice == 'q':
            print("Quiting Greekify")
            return
        
        if choice == 'm':
            #show more options
            pass
        try:
            print("Replacing " + word + " with " + choices[choice - 1][0].encode( 'utf-8', 'ignore' ) + "\n")
            replaced_string += (choices[choice - 1][0]) + " "
            print(replaced_string + "\n")
        except:
            pass
        
def repl():
    print("Beginning flat Greek repl. When prompted, enter your flat greek word and press enter. \
        Then enter one of the given numbers to replace the original with the selected word.\n")
    corpus_ = load_corpus()
    replaced_string = ""
    
    while True:
        try:
            word = raw_input("word? ").strip()
            choice = ""
            if word != "":
                #get options and sort
                choices = lookup_word(corpus_, word)
                
                #loop until valid selection given
                while type(choice) != int or len(choices) < choice or choice < 1:
                    try:
                        err_str = ""
                        #print options
                        print_choices(choices)
                        
                        #get raw input and try to make     int
                        choice = raw_input("choice? ")
                        choice = int(choice)

                    #error checking
                    except NameError:
                        err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
                    except ValueError:
                        err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
                        
                    if choice == "q":
                        print("Quiting Greekify")
                        return
                        
                    if choice < 1 or choice > len(choices):
                        err_str = "Integers between 1 and " + str(len(choices)) + " please.\n"
                        
                    print(err_str)
                    

                    
                print("Replacing " + word + " with " + choices[choice - 1][0].encode( 'utf-8', 'ignore' ) + "\n")
        except KeyError:
            print("Sorry, " + word + " was not found in the corpus.\n")
        
def flatten_corpus():
    corpus_ = open("./corpus/01_gk.unicode").read().decode( 'utf-8', 'ignore' )
    flat = corpus.strip_accents(corpus_)
    return flat
    
def main():
    try:
        #_file = open("./corpus/flat_test","w")
        #_file.write(flatten_corpus().encode("utf-8", "ignore"))
        #parse_file("./corpus/flat_test")
        #repl()
        if len(sys.argv) == 2 and os.path.exists(sys.argv[1]):
            parse_file(sys.argv[1])
        else:
            print("Error, either too many arguments, or file not found.")
            
    # if keyboard interupt print then quit (no traceback)
    except KeyboardInterrupt:
        print "Shutdown requested...exiting"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)
    
if __name__ == "__main__":
    main()